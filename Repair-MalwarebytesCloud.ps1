<#     
	.NOTES
    ===========================================================================
	            Created on:    02/25/2019
                Modified on:   04/12/2019 - Added more validations
	            Created by:    Taylor Triggs
                Notes:         Run as Admin
	            Dependencies:  PowerShell 5.0
    ===========================================================================

    .SYNOPSIS 
                Script repairs Malwarebytes Cloud services and the configuration on client machines

    .DESCRIPTION
                Script takes a list of hostnames from list.csv, and invokes commands to repair any Malwarebytes service issues
                List.csv needs to start with FixList, then hostnames underneath one per line, see example below

    .EXAMPLE
                FixList
                Comp01
                Comp02
                Comp03

    .LINK
                https://cloud.malwarebytes.com
                
#>

#Requires –Version 5
#Requires -Modules ActiveDirectory

Import-Module ActiveDirectory

$computerslist = @()

$scriptFolderRoot = Split-Path $MyInvocation.MyCommand.Path
$fixList = "$scriptFolderRoot\list.csv"

# Verify the CSV file exists
if (!(Test-Path $fixList)) 
{ 
    Write-Host -ForegroundColor Red "The CSV file is missing, please create the CSV file with FixList as the first item and run again" 
}

else 
{
    Import-Csv $fixList | ForEach-Object { $computerslist += $_.FixList }

    foreach ($comp in $computerslist)
    {   
        $comp = $comp -replace '(^\s+|\s+$)','' -replace '\s+',' ' # removes any double spaces, tabs, single blank spaces on the line

        # Verify computer exists in AD
        if (-not $(Get-ADComputer -Identity "$comp")) 
        { 
            Write-Host -ForegroundColor YELLOW "$comp does not exist in AD" 
        }

        else
        {
            Write-Host -ForegroundColor Yellow -NoNewline "`n$comp "
        
            # First check if the computer is online
            if (Test-Connection -Computername $comp -BufferSize 16 -Count 1 -Quiet)
            {
                Write-Host -ForegroundColor Green "Online"

                $winRMService = (Get-Service -Name WinRM -ComputerName $comp).Status

                # Make sure WinRM service is running
                if ($winRMService -ne "Running")
                {
                    try
                    {
                        Get-Service -Name WinRM -ComputerName $comp | Start-Service -ErrorAction Stop
                    }

                    catch
                    {
                        Write-Host -ForegroundColor Red "WinRM service could not start, moving on to next computer"
                        Continue
                    }
                }

                # Create our remote session
                try
                {
                    $so = New-PSSession $comp -ErrorAction Stop

                    Invoke-Command -Session $so -ScriptBlock {

                        $verifyInstalled = (Get-WmiObject win32_product -filter "Name LIKE 'Malwarebytes Endpoint Agent'").Name

                        # 1 - Verify Cloud is installed
                        if ($verifyInstalled -ne "Malwarebytes Endpoint Agent")
                        {
                            Write-Host -ForegroundColor Red "`tMalwarebytes Cloud is not installed"
                            Continue
                        }

                        # 2 - If any files exist in this directory, then a reboot is needed for the services to start again
                        $verifyService = Get-Service -Name MBAMService -ErrorAction SilentlyContinue
                        if (!$verifyService)
                        {
                            if (Test-Path C:\ProgramData\Malwarebytes\MBAMService\instlrupdate\*)
                            {
                                Write-Host -ForegroundColor Red "`tMalwarebytes has a software update pending so the computer needs to reboot for the services to work again"
                                Continue
                            }
                        }
                        
                        # 3 - Make sure services are set to Automatic Start
                        #     PowerShell V2 is different than V5 with Get-Service hence the version check

                        $versionPS = $PSVersionTable.PSVersion.Major

                        if ($versionPS -lt 5)
                        {
                            $MBAMServiceStartType = (Get-WmiObject win32_service -Filter "name like 'MBAMService'" | Select-Object startmode).startmode
                            $MBEndpointAgentStartType = (Get-WmiObject win32_service -Filter "name like 'MBEndpointAgent'" | Select-Object startmode).startmode
                            
                            if ( ($MBAMServiceStartType -eq "Disabled") -or ($MBAMServiceStartType -eq "Manual") )
                            {
                                try
                                {
                                    Set-Service -Name MBAMService -StartupType Automatic -ErrorAction Stop
                                    Write-Host "`tMBAMService start type was incorrect"
                                }

                                catch
                                {
                                    Write-Host -ForegroundColor Red "`tfailed to change MBAMService to automatic start up"
                                }
                            }

                            if ( ($MBEndpointAgentStartType -eq "Disabled") -or ($MBEndpointAgentStartType -eq "Manual") )
                            {
                                try
                                {
                                    Set-Service -Name MBEndpointAgent -StartupType Automatic -ErrorAction Stop
                                    Write-Host "`tMBEndpointAgent start type was incorrect"
                                }

                                catch
                                {
                                    Write-Host -ForegroundColor Red "`tfailed to change MBEndpointAgent to automatic startup"
                                }
                            }
                        }

                        else
                        {
                            $MBAMServiceStartType = Get-Service -Name MBAMService | Select-Object StartType
                            $MBEndpointAgentStartType = Get-Service -Name MBEndpointAgent | Select-Object StartType

                            if ( ($MBAMServiceStartType.StartType -eq "Disabled") -or ($MBAMServiceStartType.StartType -eq "Manual") )
                            {
                                try
                                {
                                    Get-Service -Name MBAMService | Set-Service -StartupType Automatic -ErrorAction Stop
                                    Write-Host "`tMBAMService start type was incorrect"
                                }

                                catch
                                {
                                    Write-Host -ForegroundColor Red "`tfailed to set MBAMService to automatic start up"
                                }
                            }

                            if ( ($MBEndpointAgentStartType.StartType -eq "Disabled") -or ($MBEndpointAgentStartType.StartType -eq "Manual") )
                            {
                                try
                                {
                                    Get-Service -Name MBEndpointAgent | Set-Service -StartupType Automatic -ErrorAction Stop
                                    Write-Host "`tMBEndpointAgent start type was incorrect"
                                }

                                catch
                                {
                                    Write-Host -ForegroundColor Red "`tfailed to set MBEndpointAgent to automatic startup"
                                }
                            }
                        } 

                        # 4 - Make sure services are Running
                        $MBAMServiceStatus = Get-Service -Name MBAMService
                        $MBEndpointAgentStatus = Get-Service -Name MBEndpointAgent

                        if ($MBAMServiceStatus.Status -ne "Running")
                        {                   
                            try
                            {
                                Start-Service -Name MBAMService -ErrorAction Stop
                                Write-Host "`tStarted MBAMService"
                            }
                    
                            catch
                            {
                                Write-Host -ForegroundColor Red "`tfailed to start MBAMService"
                            }
                        }

                        else
                        {
                            Write-Host "`tMBAMService is Running"
                        }

                        # 5 - Run the Malwarebytes Cloud config recovery tool if necessary
                        if ($MBEndpointAgentStatus.Status -ne "Running")
                        {
                            # Since the component that handles cloud access was already stopped, run the Malwarebytes configuration recovery tool
                            $configCheck = . "C:\Program Files\Malwarebytes Endpoint Agent\ConfigurationRecoveryTool.exe" "C:\Program Files\Malwarebytes Endpoint Agent\mbcloudea.exe"
                            
                            if ($configCheck -like "Config looks good*")
                            {
                                Write-Host "`tConfig is good"
                            }

                            else
                            {
                                Write-Host -ForegroundColor Red "`tConfig needs to be repaired"
                            }

                            try
                            {
                                Start-Service -Name MBEndpointAgent -ErrorAction Stop
                                Write-Host "`tStarted MBEndpointAgent"
                            }

                            catch
                            {
                                Write-Host -ForegroundColor Red "`tfailed to start MBEndpointAgent, may need to reinstall software"
                            }
                        }

                        else
                        {
                            Write-Host "`tMBEndpointAgent is Running"
                        }
                        
                        # 6 - Validates cloud access by looking up your public ip
                        Function Check-MalwarebytesCloudAccess
                        {
                            try
                            {
                                Invoke-RestMethod -Uri https://cloud.malwarebytes.com -TimeoutSec 15 -ErrorAction Stop
                                return $true
                            }

                            catch
                            {
                                return $false
                            }
                        }

                        $checkInternet = Check-MalwarebytesCloudAccess

                        if ($checkInternet -eq $false)
                        {
                            Write-Host -ForegroundColor Red "`tcomputer does not have an internet connection and cannot see Malwarebytes Cloud"
                        }
                    }
                
                    # Remove the session to allow connection to another computer in the list
                    Remove-PSSession -Session $so
                }

                catch
                {
                    Write-Host -ForegroundColor Red "Online but failed to create remote session, check WinRM service"
                }
            } 

            else 
            { 
                Write-Host -ForegroundColor Red "Offline" 
            }
        } 
    }
}